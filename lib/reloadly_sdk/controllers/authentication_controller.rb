# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # AuthenticationController
  class AuthenticationController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] content_type Required parameter:
    # Example:application/json
    # @param [Object] body Required parameter: Request Payload
    # @return [Mixed] response from the API call
    def reloadly_auth(content_type,
                      body)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AUTHENTICATION)
      _query_builder << '/token'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => content_type
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: APIHelper.json_serialize(body)
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Access Denied',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
