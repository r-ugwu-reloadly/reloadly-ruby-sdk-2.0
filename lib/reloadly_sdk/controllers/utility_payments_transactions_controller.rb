# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # UtilityPaymentsTransactionsController
  class UtilityPaymentsTransactionsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] reference_id Optional parameter: The reference ID you may
    # have specified while placing the transaction.
    # @param [Integer] page Optional parameter: The page to be retrieved from
    # the transaction list.
    # @param [Integer] size Optional parameter: Number of items to include in a
    # single page.
    # @param [String] start_date Optional parameter: Indicates the start date
    # for the range of transactions to be retrieved.
    # @param [String] end_date Optional parameter: Indicates the end date for
    # the range of transactions to be retrieved.
    # @param [String] status Optional parameter: The transaction's status. Can
    # be either PROCESSING, SUCCESSFUL, FAILED, or REFUNDED.
    # @param [String] service_type Optional parameter: The biller's service
    # type. Can be either PREPAID or POSTPAID.
    # @param [String] biller_type Optional parameter: The biller's type. Can be
    # either ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT, TV_BILL_PAYMENT, or
    # INTERNET_BILL_PAYMENT
    # @param [String] biller_country_code Optional parameter: Indicates the ISO
    # code of the country where the biller is located.
    # @return [Mixed] response from the API call
    def reloadly_utility_payments_transactions(accept,
                                               authorization,
                                               reference_id: nil,
                                               page: nil,
                                               size: nil,
                                               start_date: nil,
                                               end_date: nil,
                                               status: nil,
                                               service_type: nil,
                                               biller_type: nil,
                                               biller_country_code: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::UTILITY_PAYMENTS)
      _query_builder << '/transactions'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'referenceId' => reference_id,
        'page' => page,
        'size' => size,
        'startDate' => start_date,
        'endDate' => end_date,
        'status' => status,
        'serviceType' => service_type,
        'billerType' => biller_type,
        'billerCountryCode' => biller_country_code
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [Integer] id Required parameter: The utility payment's
    # identification number.
    # @return [Mixed] response from the API call
    def reloadly_utility_payments_transaction_by_id(accept,
                                                    authorization,
                                                    id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::UTILITY_PAYMENTS)
      _query_builder << '/transactions/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
