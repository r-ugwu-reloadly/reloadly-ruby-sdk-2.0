# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # GiftCardsOrdersController
  class GiftCardsOrdersController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [Integer] transactionid Required parameter: Indicates the
    # transaction identification number of the gift card's redeem code to be
    # retrieved.
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_redeem_codes(accept,
                                         authorization,
                                         transactionid)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/orders/transactions/{transactionid}/cards'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'transactionid' => { 'value' => transactionid, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Invalid transaction ID',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [Object] body Required parameter: Request Payload
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_orders(accept,
                                   authorization,
                                   body)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/orders'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization,
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: APIHelper.json_serialize(body)
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise APIException.new(
          'Invalid price, please ensure you selected the right price',
          _response
        )
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
