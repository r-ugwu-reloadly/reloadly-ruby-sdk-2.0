# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # AirtimeOperatorsController
  class AirtimeOperatorsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter:
    # Example:application/com.reloadly.topups-v1+json
    # @param [String] authorization Required parameter: Example:
    # @param [String] include_bundles Optional parameter: Indicates if any
    # airtime and data bundles being offered by the operator should be included
    # in the API response. Default value is true.
    # @param [String] include_data Optional parameter: Indicates if any airtime
    # or data plans being offered by the operator should be included in the API
    # response. Default value is true.
    # @param [String] suggested_amounts_map Optional parameter: Indicates if
    # this field should be returned as a response. Default value is false.
    # @param [String] size Optional parameter: This indicates the number of
    # operators to be retrieved on a page. Default value is 200.
    # @param [String] page Optional parameter: This indicates the page of the
    # operator list being retrieved. Default value is 1.
    # @return [Mixed] response from the API call
    def reloadly_airtime_operators(accept,
                                   authorization,
                                   include_bundles: nil,
                                   include_data: nil,
                                   suggested_amounts_map: nil,
                                   size: nil,
                                   page: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/operators'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'includeBundles' => include_bundles,
        'includeData' => include_data,
        'suggestedAmountsMap' => suggested_amounts_map,
        'size' => size,
        'page' => page
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter:
    # Example:application/com.reloadly.topups-v1+json
    # @param [String] authorization Required parameter: Example:
    # @param [String] phone Required parameter: The mobile number whose details
    # are to be retrieved.
    # @param [String] countryisocode Required parameter: The ISO code of the
    # country where the mobile number is registered.
    # @param [String] countrycode Required parameter: Example:
    # @param [TrueClass|FalseClass] suggested_amounts Optional parameter:
    # Indicates if this field should be returned as a response. Default value is
    # false.
    # @param [TrueClass|FalseClass] suggested_amounts_map Optional parameter:
    # Indicates if this field should be returned as a response. Default value is
    # false.
    # @return [Mixed] response from the API call
    def reloadly_airtime_operator_autodetect(accept,
                                             authorization,
                                             phone,
                                             countryisocode,
                                             countrycode,
                                             suggested_amounts: nil,
                                             suggested_amounts_map: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/operators/auto-detect/phone/{phone}/countries/{countrycode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'phone' => { 'value' => phone, 'encode' => true },
        'countryisocode' => { 'value' => countryisocode, 'encode' => true },
        'countrycode' => { 'value' => countrycode, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'suggestedAmounts' => suggested_amounts,
        'suggestedAmountsMap' => suggested_amounts_map
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Country code must be 2 characters ISO-Alpha-2 country code. See' \
          ' https://www.iban.com/country-codes',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter:
    # Example:application/com.reloadly.topups-v1+json
    # @param [String] authorization Required parameter: Example:
    # @param [String] operatorid Required parameter: The operator's
    # identification number.
    # @return [Mixed] response from the API call
    def reloadly_airtime_operator_by_id(accept,
                                        authorization,
                                        operatorid)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/operators/{operatorid}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'operatorid' => { 'value' => operatorid, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Operator not found for given id',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter:
    # Example:application/com.reloadly.topups-v1+json
    # @param [String] authorization Required parameter: Example:
    # @param [String] countrycode Required parameter: The ISO code of the
    # country where the operator is registered.
    # @param [TrueClass|FalseClass] include_bundles Required parameter:
    # Indicates if any airtime and data bundles being offered by the operator
    # should be returned as a response. Default value is true.
    # @param [TrueClass|FalseClass] suggested_amounts_map Optional parameter:
    # Indicates if this field should be returned as a response. Default value is
    # false.
    # @param [String] suggested_amounts Optional parameter: Indicates if this
    # field should be returned as a response. Default value is false.
    # @param [TrueClass|FalseClass] include_pin Optional parameter: Indicates if
    # PIN details if applicable to the operator, should be returned as a
    # response. Default value is true.
    # @param [TrueClass|FalseClass] include_data Optional parameter: Indicates
    # if any data plans being offered by the operator should be returned as a
    # response. Default value is true.
    # @return [Mixed] response from the API call
    def reloadly_airtime_operator_by_iso(accept,
                                         authorization,
                                         countrycode,
                                         include_bundles,
                                         suggested_amounts_map: nil,
                                         suggested_amounts: nil,
                                         include_pin: nil,
                                         include_data: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/operators/countries/{countrycode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'countrycode' => { 'value' => countrycode, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'Authorization' => authorization,
        'includeBundles' => include_bundles,
        'suggestedAmountsMap' => suggested_amounts_map,
        'suggestedAmounts' => suggested_amounts,
        'includePin' => include_pin,
        'includeData' => include_data
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Country not found and/or not currently supported',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
