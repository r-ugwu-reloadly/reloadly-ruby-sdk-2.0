# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # AirtimeCommissionsController
  class AirtimeCommissionsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter:
    # Example:application/com.reloadly.topups-v1+json
    # @param [String] authorization Required parameter: Example:
    # @param [Integer] size Optional parameter: This indicates the number of
    # operators offering discounts to be retrieved on a page. Default value is
    # 200.
    # @param [Integer] page Optional parameter: This indicates the page of the
    # discounts list being retrieved. Default value is 1.
    # @return [Mixed] response from the API call
    def reloadly_airtime_commissions(accept,
                                     authorization,
                                     size: nil,
                                     page: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/operators/commissions'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'size' => size,
        'page' => page
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] operatorid Required parameter: Example:
    # @return [Mixed] response from the API call
    def reloadly_airtime_commission_by_id(accept,
                                          authorization,
                                          operatorid)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/operators/{operatorid}/commissions'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'operatorid' => { 'value' => operatorid, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Operator not found for given ID',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
