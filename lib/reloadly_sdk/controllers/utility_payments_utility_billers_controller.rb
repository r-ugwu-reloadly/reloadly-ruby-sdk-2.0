# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # UtilityPaymentsUtilityBillersController
  class UtilityPaymentsUtilityBillersController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [Integer] id Optional parameter: This is the unique identification
    # number of each biller. It uniquely identifies the biller servicing the
    # utility.
    # @param [String] name Optional parameter: This indicates the biller's name.
    # In situations where the biller's name is exceptionally long, partial names
    # are used.
    # @param [String] type Optional parameter: This indicates the type of
    # utility payment handled by the biller. Values included are
    # ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT, TV_BILL_PAYMENT and
    # INTERNET_BILL_PAYMENT.
    # @param [String] service_type Optional parameter: This indicates the
    # payment service type being rendered by the utility biller service.
    # Examples are PREPAID and POSTPAID.
    # @param [String] country_iso_code Optional parameter: This indicates the
    # ISO code of the country where the utility biller is operating in.
    # @param [Integer] page Optional parameter: This indicates the page of the
    # billers list being retrieved. Default value is 1.
    # @param [Integer] size Optional parameter: This indicates the number of
    # billers to be retrieved on a page. Default value is 200.
    # @return [Mixed] response from the API call
    def reloadly_utility_payments_billers(accept,
                                          authorization,
                                          id: nil,
                                          name: nil,
                                          type: nil,
                                          service_type: nil,
                                          country_iso_code: nil,
                                          page: nil,
                                          size: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::UTILITY_PAYMENTS)
      _query_builder << '/billers'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'id' => id,
        'name' => name,
        'type' => type,
        'serviceType' => service_type,
        'countryISOCode' => country_iso_code,
        'page' => page,
        'size' => size
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
