# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # GiftCardsTransactionsController
  class GiftCardsTransactionsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] size Optional parameter: This indicates the number of
    # transactions to be retrieved on a page.
    # @param [String] page Optional parameter: This indicates the page of the
    # transactions list being retrieved.
    # @param [String] start_date Optional parameter: Indicates the start date
    # for the range of transactions to be retrieved.
    # @param [String] end_date Optional parameter: Indicates the end date for
    # the range of transactions to be retrieved.
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_transactions(accept,
                                         authorization,
                                         size: nil,
                                         page: nil,
                                         start_date: nil,
                                         end_date: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/reports/transactions'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'size' => size,
        'page' => page,
        'startDate' => start_date,
        'endDate' => end_date
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Could not retrieve/update resources at the moment, please try' \
          ' again later',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] transactionid Required parameter: Indicates the
    # identification number of the transaction to be retrieved.
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_transaction_by_id(accept,
                                              authorization,
                                              transactionid)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/reports/transactions/{transactionid}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'transactionid' => { 'value' => transactionid, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Indicates the identification number of the transaction to be' \
          ' retrieved.',
          _response
        )
      when 404
        raise APIException.new(
          'Could not retrieve/update resources at the moment, please try' \
          ' again later',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
