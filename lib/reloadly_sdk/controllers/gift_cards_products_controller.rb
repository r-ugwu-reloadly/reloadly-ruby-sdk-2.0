# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # GiftCardsProductsController
  class GiftCardsProductsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [TrueClass|FalseClass] include_range Optional parameter: Indicates
    # the list of gift card products with the denominationType property
    # specified as RANGE are to be retrieved.
    # @param [TrueClass|FalseClass] include_fixed Optional parameter: Indicates
    # the list of gift card products with the denominationType property
    # specified as FIXED are to be retrieved.
    # @param [Integer] size Optional parameter: This indicates the number of
    # gift card products to be retrieved on a page.
    # @param [String] page Optional parameter: This indicates the page of the
    # product list being retrieved.
    # @param [String] product_name Optional parameter: Indicates the name of the
    # gift card product.
    # @param [String] country_code Optional parameter: Indicates the ISO code of
    # the country whose gift card products are to be retrieved.
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_products(accept,
                                     authorization,
                                     include_range: nil,
                                     include_fixed: nil,
                                     size: nil,
                                     page: nil,
                                     product_name: nil,
                                     country_code: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/products'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'includeRange' => include_range,
        'includeFixed' => include_fixed,
        'size' => size,
        'page' => page,
        'productName' => product_name,
        'countryCode' => country_code
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [Integer] productid Required parameter: The product's
    # identification number.
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_product_by_id(accept,
                                          authorization,
                                          productid)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/products/{productid}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productid' => { 'value' => productid, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise APIException.new(
          'The product was either not found or is no longer available,' \
          ' Please contact support',
          _response
        )
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] countrycode Required parameter: The ISO code of the
    # country you want to display available gift cards for.
    # @return [Mixed] response from the API call
    def reloadly_gift_cards_product_by_iso(accept,
                                           authorization,
                                           countrycode)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::GIFT_CARDS)
      _query_builder << '/countries/{countrycode}/products'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'countrycode' => { 'value' => countrycode, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Country not found and/or not currently supported',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
