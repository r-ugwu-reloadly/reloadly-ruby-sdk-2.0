# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  # AirtimePromotionsController
  class AirtimePromotionsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [Integer] size Optional parameter: This indicates the number of
    # promotions to be retrieved on a page. Default value is 200.
    # @param [Integer] page Optional parameter: This indicates the page of the
    # promotions list being retrieved. Default value is 1.
    # @param [Integer] language_code Optional parameter: This indicates the
    # language you want the promotion information to be displayed in. The
    # language code is to be specified in the ISO 639-1 format. Choices are
    # 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and 'DE'.
    # Default is 'EN'. This is a case-insensitive field. The promotion
    # information is returned in your requested language irrespective of the
    # original language in which the promotion was launched.
    # @return [Mixed] response from the API call
    def reloadly_airtime_promotions(accept,
                                    authorization,
                                    size: nil,
                                    page: nil,
                                    language_code: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/promotions'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'size' => size,
        'page' => page,
        'languageCode' => language_code
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] promotionid Required parameter: The promotion's
    # identification number.
    # @param [String] language_code Optional parameter: This indicates the
    # language you want the promotion information to be displayed in. The
    # language code is to be specified in the ISO 639-1 format. Choices are
    # 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI', 'HT', 'JA' and 'DE'.
    # Default is 'EN'. This is a case-insensitive field. The promotion
    # information is returned in your requested language irrespective of the
    # original language in which the promotion was launched.
    # @return [Mixed] response from the API call
    def reloadly_airtime_promotion_by_id(accept,
                                         authorization,
                                         promotionid,
                                         language_code: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/promotions/{promotionid}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'promotionid' => { 'value' => promotionid, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'languageCode' => language_code
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Promotion not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] countrycode Required parameter: Example:
    # @return [Mixed] response from the API call
    def reloadly_airtime_promotion_by_iso(accept,
                                          authorization,
                                          countrycode)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/promotions/country-codes/{countrycode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'countrycode' => { 'value' => countrycode, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept,
        'Authorization' => authorization
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end

    # TODO: type endpoint description here
    # @param [String] accept Required parameter: Example:
    # @param [String] authorization Required parameter: Example:
    # @param [String] operatorid Required parameter: Example:
    # @return [Mixed] response from the API call
    def reloadly_airtime_promotion_by_operator_id(accept,
                                                  authorization,
                                                  operatorid)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::AIRTIME)
      _query_builder << '/promotions/operators/{operatorid}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'Authorization' => { 'value' => authorization, 'encode' => true },
        'operatorid' => { 'value' => operatorid, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'Accept' => accept
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 401
        raise APIException.new(
          'Full authentication is required to access this resource',
          _response
        )
      when 404
        raise APIException.new(
          'Not Found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body) unless
        _response.raw_body.nil? ||
        _response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
