# reloadly_sdk
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ReloadlySdk
  #  reloadly_sdk client class.
  class Client
    attr_reader :config

    # Access to authentication controller.
    # @return [AuthenticationController] Returns the controller instance.
    def authentication
      @authentication ||= AuthenticationController.new config
    end

    # Access to airtime_account_balance controller.
    # @return [AirtimeAccountBalanceController] Returns the controller instance.
    def airtime_account_balance
      @airtime_account_balance ||= AirtimeAccountBalanceController.new config
    end

    # Access to airtime_countries controller.
    # @return [AirtimeCountriesController] Returns the controller instance.
    def airtime_countries
      @airtime_countries ||= AirtimeCountriesController.new config
    end

    # Access to airtime_operators controller.
    # @return [AirtimeOperatorsController] Returns the controller instance.
    def airtime_operators
      @airtime_operators ||= AirtimeOperatorsController.new config
    end

    # Access to airtime_fx_rates controller.
    # @return [AirtimeFXRatesController] Returns the controller instance.
    def airtime_fx_rates
      @airtime_fx_rates ||= AirtimeFXRatesController.new config
    end

    # Access to airtime_commissions controller.
    # @return [AirtimeCommissionsController] Returns the controller instance.
    def airtime_commissions
      @airtime_commissions ||= AirtimeCommissionsController.new config
    end

    # Access to airtime_promotions controller.
    # @return [AirtimePromotionsController] Returns the controller instance.
    def airtime_promotions
      @airtime_promotions ||= AirtimePromotionsController.new config
    end

    # Access to airtime_topups controller.
    # @return [AirtimeTopupsController] Returns the controller instance.
    def airtime_topups
      @airtime_topups ||= AirtimeTopupsController.new config
    end

    # Access to airtime_transactions controller.
    # @return [AirtimeTransactionsController] Returns the controller instance.
    def airtime_transactions
      @airtime_transactions ||= AirtimeTransactionsController.new config
    end

    # Access to gift_cards_account_balance controller.
    # @return [GiftCardsAccountBalanceController] Returns the controller instance.
    def gift_cards_account_balance
      @gift_cards_account_balance ||= GiftCardsAccountBalanceController.new config
    end

    # Access to gift_cards_countries controller.
    # @return [GiftCardsCountriesController] Returns the controller instance.
    def gift_cards_countries
      @gift_cards_countries ||= GiftCardsCountriesController.new config
    end

    # Access to gift_cards_products controller.
    # @return [GiftCardsProductsController] Returns the controller instance.
    def gift_cards_products
      @gift_cards_products ||= GiftCardsProductsController.new config
    end

    # Access to gift_cards_redeem_instructions controller.
    # @return [GiftCardsRedeemInstructionsController] Returns the controller instance.
    def gift_cards_redeem_instructions
      @gift_cards_redeem_instructions ||= GiftCardsRedeemInstructionsController.new config
    end

    # Access to gift_cards_discounts controller.
    # @return [GiftCardsDiscountsController] Returns the controller instance.
    def gift_cards_discounts
      @gift_cards_discounts ||= GiftCardsDiscountsController.new config
    end

    # Access to gift_cards_transactions controller.
    # @return [GiftCardsTransactionsController] Returns the controller instance.
    def gift_cards_transactions
      @gift_cards_transactions ||= GiftCardsTransactionsController.new config
    end

    # Access to gift_cards_orders controller.
    # @return [GiftCardsOrdersController] Returns the controller instance.
    def gift_cards_orders
      @gift_cards_orders ||= GiftCardsOrdersController.new config
    end

    # Access to airtime_number_lookup controller.
    # @return [AirtimeNumberLookupController] Returns the controller instance.
    def airtime_number_lookup
      @airtime_number_lookup ||= AirtimeNumberLookupController.new config
    end

    # Access to utility_payments_account_balance controller.
    # @return [UtilityPaymentsAccountBalanceController] Returns the controller instance.
    def utility_payments_account_balance
      @utility_payments_account_balance ||= UtilityPaymentsAccountBalanceController.new config
    end

    # Access to utility_payments_utility_billers controller.
    # @return [UtilityPaymentsUtilityBillersController] Returns the controller instance.
    def utility_payments_utility_billers
      @utility_payments_utility_billers ||= UtilityPaymentsUtilityBillersController.new config
    end

    # Access to utility_payments_pay_bill controller.
    # @return [UtilityPaymentsPayBillController] Returns the controller instance.
    def utility_payments_pay_bill
      @utility_payments_pay_bill ||= UtilityPaymentsPayBillController.new config
    end

    # Access to utility_payments_transactions controller.
    # @return [UtilityPaymentsTransactionsController] Returns the controller instance.
    def utility_payments_transactions
      @utility_payments_transactions ||= UtilityPaymentsTransactionsController.new config
    end

    def initialize(connection: nil, adapter: :net_http_persistent, timeout: 60,
                   max_retries: 0, retry_interval: 1, backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put],
                   environment: Environment::PRODUCTION, config: nil)
      @config = if config.nil?
                  Configuration.new(connection: connection, adapter: adapter,
                                    timeout: timeout, max_retries: max_retries,
                                    retry_interval: retry_interval,
                                    backoff_factor: backoff_factor,
                                    retry_statuses: retry_statuses,
                                    retry_methods: retry_methods,
                                    environment: environment)
                else
                  config
                end
    end
  end
end
